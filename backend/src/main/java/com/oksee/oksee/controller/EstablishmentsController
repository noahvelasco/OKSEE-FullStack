package com.oksee.oksee.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import jakarta.validation.Valid;

import com.oksee.oksee.model.Establishment;
import com.oksee.oksee.repository.EstablishmentRepository;


/*
 * Contains the CRUD operations for establishments
 */

@RestController
@RequestMapping("/api/establishments")
@CrossOrigin
public class EstablishmentsController {

	private final EstablishmentRepository repository;

	public EstablishmentsController(EstablishmentRepository repository) {
		this.repository = repository;
	}

	// make a request and find all establishments in the system
	@GetMapping
	public List<Establishment> findAll() {
		return repository.findAll();
	}

	@GetMapping("/{id}")
	public Establishment findByID(@PathVariable Integer id) {
		return repository.findById(id)
				.orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Establishment Not Found!"));
	}

	@ResponseStatus(HttpStatus.CREATED)
	@PostMapping("")
	public void create(@Valid @RequestBody Establishment est) {
		repository.save(est);
	}

	@ResponseStatus(HttpStatus.NO_CONTENT)
	@PutMapping("/{id}")
	public void update(@RequestBody Establishment est, @PathVariable Integer id) {
		if (!repository.existsById(id)) {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Establishment Not Found!");
		}

		repository.save(est);
	}

	@ResponseStatus(HttpStatus.NO_CONTENT)
	@DeleteMapping("/{id}")
	public void delete(@PathVariable Integer id) {
		repository.deleteById(id);
	}

	@GetMapping("/filter/{keyword}")
	public List<Establishment> findByTitle(@PathVariable String keyword) {

		return repository.findAllByTitleContains(keyword);
	}

	@GetMapping("/filter/est/{est}")
	public List<Establishment> findByStatus(@PathVariable String est) {

		return repository.listByEstablishmentTitle(est);
	}

}
